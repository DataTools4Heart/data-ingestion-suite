{
  "id" : "lab-results-mapping",
  "url" : "https://datatools4heart.eu/fhir/mappings/ucl/lab-result-mapping",
  "name" : "lab-results-mapping",
  "title" : "Mapping of OMOP observation to the DT4H-LabResult profile",
  "source" : [ {
    "alias" : "omopObservation",
    "url" : "https://www.ucl.com/fhir/StructureDefinition/OMOP-Observation",
    "joinOn" : [ ]
  } ],
  "context" : {
    "labResultConceptMap" : {
      "category" : "concept-map",
      "url" : "$CONTEXT_REPO/ucl/lab-results-concept-map"
    },
    "unitConversionMap" : {
      "category" : "unit-conversion",
      "url" : "$CONTEXT_REPO/ucl/lab-result-unit-conversion"
    }
  },
  "variable" : [ {
    "name" : "labCode",
    "language" : "text/fhirpath",
    "expression" : "mpp:getConcept(%labResultConceptMap, observation_concept_id.toString())"
  } ],
  "mapping" : [ {
    "expression" : {
      "name" : "result",
      "language" : "application/fhir-template+json",
      "value" : {
        "resourceType" : "Observation",
        "id" : "{{mpp:getHashedId('Observation', observation_id.toString())}}",
        "meta" : {
          "profile" : [ "https://datatools4heart.eu/fhir/StructureDefinition/DT4H-LabResult" ],
          "source" : "{{%sourceSystem.sourceUri}}"
        },
        "status" : "final",
        "category" : [ {
          "coding" : [ {
            "system" : "http://terminology.hl7.org/CodeSystem/observation-category",
            "code" : "laboratory",
            "display" : "Laboratory result"
          } ]
        } ],
        "encounter" : "{{mpp:createFhirReferenceWithHashedId('Encounter', visit_occurrence_id.toString())}}",
        "subject" : "{{mpp:createFhirReferenceWithHashedId('Patient', person_id.toString())}}",
        "code" : {
          "coding" : [ {
            "code" : "{{%labCode.target_code}}",
            "system" : "http://loinc.org"
          } ]
        },
        "effectiveDateTime" : "{{iif(observation_datetime.empty(), observation_date, observation_datetime)}}",
        "valueQuantity" : "{{mpp:convertAndReturnQuantity(%unitConversionMap, %labCode.source_code, value_as_number, unit_concept_id.toString().nav:orElse(utl:createFhirQuantity(value_as_number, unit))}}"
      }
    },
    "precondition" : {
      "name" : "isValidLabResult",
      "language" : "text/fhirpath",
      "expression" : "%labCode.exists()"
    }
  } ]
}
